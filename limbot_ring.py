"""
Automatizaci√≥n para descargar la √∫ltima factura de Ring y enviarla por email.
Utiliza login program√°tico con 2FA (TOTP) para ser 100% aut√≥nomo.
"""
import os
import smtplib
import pyotp
from pathlib import Path
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

from playwright.sync_api import sync_playwright, TimeoutError as PWTimeout
from dotenv import load_dotenv

# Cargar variables de entorno desde el archivo .env al inicio
load_dotenv()

# --- CONFIGURACI√ìN (le√≠da desde variables de entorno) ---
# Credenciales de Ring
RING_EMAIL = os.getenv("RING_EMAIL")
RING_PASSWORD = os.getenv("RING_PASSWORD")
RING_TOTP_SECRET = os.getenv("RING_TOTP_SECRET")
BILLING_URL = "https://account.ring.com/account/billing/history"

# Configuraci√≥n del Navegador
UA = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"

# Configuraci√≥n de Email
SMTP_SERVER = os.getenv("SMTP_SERVER")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USER = os.getenv("SMTP_USER")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL")

# Directorios
DOWNLOAD_DIR = Path("/tmp/ring_invoices")

def do_login(page):
    """
    Versi√≥n final: Su √∫nica responsabilidad es completar el login y dejar
    la sesi√≥n establecida en la p√°gina a la que Ring redirija.
    """
    print("‚û°Ô∏è  Iniciando sesi√≥n en Ring...")
    # ... (El c√≥digo de navegaci√≥n, cookies, an√°lisis forense, email y contrase√±a es id√©ntico)...
    print("‚û°Ô∏è  Navegando a la p√°gina de inicio...")
    page.goto("https://ring.com/es/es", wait_until="networkidle")

    try:
        page.locator("button:has-text('Aceptar')").click(timeout=5000)
        print("‚úÖ Banner de cookies aceptado.")
        page.wait_for_timeout(1000)
    except Exception:
        print("‚ö†Ô∏è  No se encontr√≥ el banner de cookies, continuando...")

    try:
        page.locator("a:has-text('Iniciar sesi√≥n'), a:has-text('Sign In')").first.click()
        page.wait_for_load_state("networkidle", timeout=20000)
        print("‚úÖ P√°gina de login cargada.")
    except Exception:
        print("‚ö†Ô∏è  No se encontr√≥/puls√≥ 'Iniciar sesi√≥n', asumiendo que ya estamos en la p√°gina correcta.")

    page.wait_for_timeout(3000)
    email_selector = "input[data-testid='input-form-field-sign-in-card'], input[name='username']"
    login_container = page
    if not page.locator(email_selector).count() > 0:
        for frame in page.frames[1:]:
            if frame.locator(email_selector).count() > 0:
                print(f"‚úÖ ¬°Formulario encontrado en el iframe con URL: {frame.url}!")
                login_container = frame
                break
    if not login_container:
        raise Exception("No se pudo localizar el formulario de login.")

    print("‚û°Ô∏è  Rellenando email y contrase√±a...")
    login_container.locator(email_selector).fill(RING_EMAIL)
    login_container.locator("button[data-testid='submit-button-final-sign-in-card']").click()
    password_input = login_container.locator("input[type='password']")
    password_input.wait_for(state="visible", timeout=20000)
    password_input.fill(RING_PASSWORD)
    login_container.locator("button[data-testid='submit-button-final-sign-in-card']").click()
    print("‚úÖ Credenciales enviadas.")

    print("‚û°Ô∏è  Esperando a que la pantalla de 2FA sea visible...")
    two_fa_title_selector = "div[data-testid='two-fa-title-sign-in-card']"
    login_container.locator(two_fa_title_selector).wait_for(state="visible", timeout=20000)
    print("‚úÖ Pantalla de 2FA detectada y lista.")

    print("‚û°Ô∏è  Generando y rellenando c√≥digo 2FA...")
    totp_selector = "input[data-testid='input-form-field-two-fa-sign-in-card']"
    totp_input = login_container.locator(totp_selector)
    totp = pyotp.TOTP(RING_TOTP_SECRET)
    code = totp.now()
    totp_input.fill(code)

    print("‚û°Ô∏è  Enviando c√≥digo 2FA y esperando la navegaci√≥n de confirmaci√≥n...")
    verify_button_selector = "button[data-testid='submit-button-final-sign-in-card']"
    with page.expect_navigation(wait_until="networkidle", timeout=30000):
        login_container.locator(verify_button_selector).click()
    
    # --- CAMBIO CLAVE ---
    # La funci√≥n termina aqu√≠. Su trabajo est√° hecho.
    print("‚úÖ Login completado y sesi√≥n establecida.")


def download_latest_invoice() -> Path:
    """
    Versi√≥n final: Utiliza la URL de facturaci√≥n correcta y es m√°s persistente
    en la navegaci√≥n post-login.
    """
    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)
    
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True) # Ponlo en False para la √∫ltima prueba
        context = browser.new_context(
            user_agent=UA,
            locale="es-ES",
            timezone_id="Europe/Madrid",
            accept_downloads=True
        )
        page = context.new_page()

        try:
            # 1. Realizar el login. Nos dejar√° en el dashboard.
            do_login(page)

            print("‚û°Ô∏è  Pausa de 2 segundos para asentar la sesi√≥n...")
            page.wait_for_timeout(2000)

            # --- NAVEGACI√ìN ROBUSTA A LA URL CORRECTA ---
            print(f"‚û°Ô∏è  Navegando a la p√°gina de facturaci√≥n: {BILLING_URL}")
            # Hacemos dos intentos para asegurarnos de que llegamos
            for attempt in range(2):
                try:
                    page.goto(BILLING_URL, wait_until="networkidle")
                    # Verificamos si hemos llegado a la URL correcta o a una sub-p√°gina
                    page.wait_for_url("**/account/billing/**", timeout=15000)
                    print("‚úÖ ¬°√âxito! Estamos en la secci√≥n de facturaci√≥n.")
                    break # Si llegamos, salimos del bucle
                except Exception as e:
                    print(f"‚ö†Ô∏è  Intento {attempt + 1} fallido. Reintentando...")
                    if attempt == 1: # Si es el √∫ltimo intento y falla, lanzamos el error
                        raise e
            # ----------------------------------------------------

            # 2. Esperar a que la tabla de facturas est√© cargada
            page.wait_for_selector("tbody tr", timeout=30000)

            # 3. Descargar la factura
            first_row = page.locator("tbody tr").first
            download_link = first_row.locator("a:has-text('Descargar'), button:has-text('Descargar')")
            
            with page.expect_download(timeout=30000) as download_info:
                download_link.click()
            
            download = download_info.value
            suggested_filename = download.suggested_filename or f"ring-factura-{datetime.now():%Y-%m}.pdf"
            save_path = DOWNLOAD_DIR / suggested_filename
            download.save_as(save_path)
            
            print(f"üìÑ Factura descargada con √©xito en: {save_path}")
            return save_path

        except Exception as e:
            error_path = Path("/tmp/ring_error_screenshot.png")
            page.screenshot(path=str(error_path))
            print(f"üö® ERROR: Ocurri√≥ un fallo. Se ha guardado una captura en {error_path}")
            raise e
        finally:
            browser.close()


def send_invoice_by_email(pdf_path: Path):
    """Env√≠a la factura en PDF como adjunto por email."""
    if not all([SMTP_USER, SMTP_PASSWORD, RECIPIENT_EMAIL]):
        print("‚ö†Ô∏è  Faltan variables de entorno para el email. No se enviar√° correo.")
        return

    print(f"‚û°Ô∏è  Preparando email para enviar a {RECIPIENT_EMAIL}...")
    
    msg = MIMEMultipart()
    msg["From"] = SMTP_USER
    msg["To"] = RECIPIENT_EMAIL
    msg["Subject"] = f"Factura de Ring - {datetime.now().strftime('%B %Y').capitalize()}"
    
    body = f"Se adjunta la √∫ltima factura de Ring.\n\nUn besito, \n Limbot."
    msg.attach(MIMEText(body, "plain"))

    try:
        with open(pdf_path, "rb") as attachment:
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename= {pdf_path.name}")
            msg.attach(part)
    except FileNotFoundError:
        print(f"üö® ERROR: No se encontr√≥ el fichero PDF en '{pdf_path}'.")
        return

    try:
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(SMTP_USER, SMTP_PASSWORD)
        server.sendmail(SMTP_USER, RECIPIENT_EMAIL, msg.as_string())
        server.quit()
        print(f"‚úÖ Email enviado correctamente a {RECIPIENT_EMAIL}")
    except Exception as e:
        print(f"üö® ERROR al enviar el email: {e}")


if __name__ == "__main__":
    try:
        # Paso 1: Descargar la factura
        invoice_file_path = download_latest_invoice()
        
        # Paso 2: Enviar la factura por email
        if invoice_file_path:
            send_invoice_by_email(invoice_file_path)
        
        print("\nüéâ Proceso completado con √©xito.")

    except Exception as e:
        print(f"\n‚ùå El proceso fall√≥ con un error: {e}")